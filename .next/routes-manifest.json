{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/admin/stats/[id]",
      "regex": "^/admin/stats/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/admin/stats/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/playlists/share/[token]",
      "regex": "^/api/playlists/share/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtoken": "nxtPtoken"
      },
      "namedRegex": "^/api/playlists/share/(?<nxtPtoken>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/playlists/[id]",
      "regex": "^/api/playlists/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/playlists/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/playlists/[id]/reorder",
      "regex": "^/api/playlists/([^/]+?)/reorder(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/playlists/(?<nxtPid>[^/]+?)/reorder(?:/)?$"
    },
    {
      "page": "/api/playlists/[id]/songs",
      "regex": "^/api/playlists/([^/]+?)/songs(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/playlists/(?<nxtPid>[^/]+?)/songs(?:/)?$"
    },
    {
      "page": "/api/playlists/[id]/songs/[songId]",
      "regex": "^/api/playlists/([^/]+?)/songs/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid",
        "nxtPsongId": "nxtPsongId"
      },
      "namedRegex": "^/api/playlists/(?<nxtPid>[^/]+?)/songs/(?<nxtPsongId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/songs/[id]",
      "regex": "^/api/songs/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/songs/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/songs/[id]/analytics",
      "regex": "^/api/songs/([^/]+?)/analytics(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/songs/(?<nxtPid>[^/]+?)/analytics(?:/)?$"
    },
    {
      "page": "/player/[id]",
      "regex": "^/player/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/player/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/playlist/[token]",
      "regex": "^/playlist/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtoken": "nxtPtoken"
      },
      "namedRegex": "^/playlist/(?<nxtPtoken>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/admin",
      "regex": "^/admin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin(?:/)?$"
    },
    {
      "page": "/admin/playlists",
      "regex": "^/admin/playlists(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/playlists(?:/)?$"
    },
    {
      "page": "/admin/songs",
      "regex": "^/admin/songs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/songs(?:/)?$"
    },
    {
      "page": "/admin/stats",
      "regex": "^/admin/stats(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/stats(?:/)?$"
    },
    {
      "page": "/admin/upload",
      "regex": "^/admin/upload(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/upload(?:/)?$"
    },
    {
      "page": "/setup",
      "regex": "^/setup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/setup(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}